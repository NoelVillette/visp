{
  "ignored_headers": ["vpGEMM.h", "vpDebug.h"],
  "ignored_classes": ["vpException", "vpImageException", "vpTrackingException",
                      "vpFrameGrabberException", "vpIoException",
                      "vpDisplayException", "vpMatrixException"],
  "user_defined_headers": ["core.hpp"],
  "enums": {
    "vpMunkres::STEP_T": {
      "ignore": true
    },
    "vpMunkres::ZERO_T": {
      "ignore": true
    }
  },
  "classes": {
    "vpIoTools": {
      "ignored_attributes": ["separator"]
    },
    "vpArray2D": {
      "additional_bindings": "bindings_vpArray2D",
      "use_buffer_protocol": true,
      "specializations": [
        {
          "python_name": "ArrayDouble2D",
          "arguments": ["double"]
        }
      ],
      "methods":
      [
        {
          "static": true,
          "signature": "void insert(const vpArray2D<Type> &, const vpArray2D<Type> &, vpArray2D<Type> &, unsigned int, unsigned int)",
          "custom_name": "insertStatic"
        }
      ]
    },
    "vpImage": {
      "additional_bindings": "bindings_vpImage",
      "use_buffer_protocol": true,
      "specializations": [
        {
          "python_name": "ImageGray",
          "arguments": ["unsigned char"]
        },
        {
          "python_name": "ImageFloat",
          "arguments": ["float"]
        },
        {
          "python_name": "ImageDouble",
          "arguments": ["double"]
        },
        {
          "python_name": "ImageUInt16",
          "arguments": ["uint16_t"]
        },
        {
          "python_name": "ImageRGBA",
          "arguments": ["vpRGBa"]
        },
        {
          "python_name": "ImageRGBf",
          "arguments": ["vpRGBf"]
        }
      ],
      "methods":
      [
        {
          "static": true,
          "signature": "void insert(const vpArray2D<Type> &, const vpArray2D<Type> &, vpArray2D<Type> &, unsigned int, unsigned int)",
          "custom_name": "insertStatic"
        }
      ]
    },
    "vpTranslationVector": {
      "methods":
      [
        {
          "static": true,
          "signature": "vpMatrix skew(const vpTranslationVector &)",
          "custom_name": "skewOf"
        },
        {
          "static": true,
          "signature": "void skew(const vpTranslationVector &, vpMatrix&)",
          "custom_name": "skewOf"
        }
      ]
    },
    "vpColVector": {
      "additional_bindings": "bindings_vpColVector",
      "use_buffer_protocol": true,
      "methods": [
        {
          "static": true,
          "signature": "vpColVector stack(const vpColVector &, const vpColVector &)",
          "custom_name": "stackVectors"
        },
        {
          "static": true,
          "signature": "void stack(const vpColVector &, const vpColVector &, vpColVector &)",
          "custom_name": "stackVectors"
        }
      ]
    },
    "vpRowVector": {
      "additional_bindings": "bindings_vpRowVector",
      "use_buffer_protocol": true,
      "methods": [
        {
          "static": true,
          "signature": "vpRowVector stack(const vpRowVector &, const vpRowVector &)",
          "custom_name": "stackVectors"
        },
        {
          "static": true,
          "signature": "void stack(const vpRowVector &, const vpRowVector &, vpRowVector &)",
          "custom_name": "stackVectors"
        }
      ]
    },
    "vpMatrix": {
      "ignore_repr": true,
      "additional_bindings": "bindings_vpMatrix",
      "use_buffer_protocol": true,
      "methods":
      [

        {

          "static": true,
          "signature": "vpMatrix insert(const vpMatrix &, const vpMatrix &, unsigned int , unsigned int)",
          "custom_name": "insertMatrixInMatrix"
        },
        {

          "static": true,
          "signature": "void insert(const vpMatrix &, const vpMatrix &, vpMatrix &, unsigned int , unsigned int)",
          "custom_name": "insertMatrixInMatrix"
        },
        {

          "static": true,
          "signature": "void kron(const vpMatrix &, const vpMatrix &, vpMatrix &)",
          "custom_name": "kronStatic"
        },
        {

          "static": true,
          "signature": "vpMatrix kron(const vpMatrix &, const vpMatrix &)",
          "custom_name": "kronStatic"
        },
        {

          "signature": "vpMatrix stack(const vpMatrix &, const vpMatrix &)",
          "static": true,
          "custom_name": "stackMatrices"
        },
        {
          "static": true,
          "signature": "vpMatrix stack(const vpMatrix &, const vpRowVector &)",
          "custom_name": "stackRow"
        },
        {

          "signature": "vpMatrix stack(const vpMatrix &, const vpColVector &)",
          "static": true,
          "custom_name": "stackColumn"
        },
        {
          "signature": "void stack(const vpMatrix &, const vpMatrix &, vpMatrix &)",
          "static": true,
          "custom_name": "stackMatrices"
        },
        {
          "signature": "void stack(const vpMatrix &, const vpRowVector &, vpMatrix &)",
          "static": true,
          "custom_name": "stackRow"
        },
        {
          "signature": "void stack(const vpMatrix &, const vpColVector &, vpMatrix &)",
          "static": true,
          "custom_name": "stackColumn"
        }
      ]
    },
    "vpRotationMatrix": {
      "additional_bindings": "bindings_vpRotationMatrix",
      "use_buffer_protocol": true
    },
    "vpHomogeneousMatrix": {
      "additional_bindings": "bindings_vpHomogeneousMatrix",
      "use_buffer_protocol": true
    },
    "vpPolygon": {
      "methods":
      [
        {
          "static": true,
          "signature": "bool isInside(const std::vector<vpImagePoint>&, const double&, const double&, const vpPolygon::PointInPolygonMethod&)",
          "custom_name": "isInsideFromPoints"
        }
      ]
    },
    "vpBSpline": {
      "methods":
      [
        {
          "static": true,
          "signature": "unsigned int findSpan(double, unsigned int, std::vector<double> &)",
          "custom_name": "findSpanFromSpline"
        },
        {
          "static": true,
          "signature": "vpImagePoint computeCurvePoint(double, unsigned int, unsigned int, std::vector<double> &, std::vector<vpImagePoint>&)",
          "custom_name": "computeCurvePointFromSpline"
        }
      ]
    },
    "vpQuadProg": {
      "methods":
      [
        {
          "static": true,
          "signature": "bool solveQPe(const vpMatrix &, const vpColVector &, vpMatrix, vpColVector, vpColVector &, const double &)",
          "custom_name": "solveQPeStatic"
        }
      ]
    },
    "vpImageTools": {
      "methods":
      [
        {
          "static": true,
          "signature": "void warpImage(const vpImage<Type>&, const vpMatrix&, vpImage<Type>&, const vpImageTools::vpImageInterpolationType&, bool, bool)",
          "specializations":
          [
            ["unsigned char"],
            ["vpRGBa"]
          ]
        }
      ]
    },

    "vpDisplay": {
      "methods":
      [
        {
          "static": true,
          "signature": "unsigned int getDownScalingFactor(const vpImage<unsigned char> &)",
          "custom_name": "getImageDownScalingFactor"
        },
        {
          "static": true,
          "signature": "unsigned int getDownScalingFactor(const vpImage<vpRGBa> &)",
          "custom_name": "getImageDownScalingFactor"
        },
        {
          "static": true,
          "signature": "void displayCircle(const vpImage<unsigned char> &, const vpImageCircle &, const vpColor &, bool, unsigned int)",
          "custom_name": "displayCircleStatic"
        },
        {
          "static": true,
          "signature": "void displayCircle(const vpImage<unsigned char> &, const vpImagePoint &, unsigned int, const vpColor &, bool, unsigned int)",
          "custom_name": "displayCircleStatic"
        },
        {
          "static": true,
          "signature": "void displayCircle(const vpImage<unsigned char> &, int, int, unsigned int, const vpColor &, bool, unsigned int)",
          "custom_name": "displayCircleStatic"
        },
        {
          "static": true,
          "signature": "void displayCircle(const vpImage<vpRGBa> &, const vpImageCircle &, const vpColor &, bool, unsigned int)",
          "custom_name": "displayCircleStatic"
        },
        {
          "static": true,
          "signature": "void displayCircle(const vpImage<vpRGBa> &, const vpImagePoint &, unsigned int, const vpColor &, bool, unsigned int)",
          "custom_name": "displayCircleStatic"
        },
        {
          "static": true,
          "signature": "void displayCircle(const vpImage<vpRGBa> &, int, int, unsigned int, const vpColor &, bool, unsigned int)",
          "custom_name": "displayCircleStatic"
        }
      ]
    },
    "vpMomentDatabase": {
      "methods": [

      ]
    },
    "vpPixelMeterConversion": {
      "additional_bindings": "bindings_vpPixelMeterConversion"
    },
    "vpMeterPixelConversion": {
      "additional_bindings": "bindings_vpMeterPixelConversion"
    }

  }

}
